=============================================================
Evaluating the quality of your short reads, and trimming them
=============================================================

.. Note::
	BTW: cool kids have pretty prompts, but you too can be cool, all you need to do is::

		echo "export PS1='\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n\$ '" >> ~/.bashrc

	Then relog. Don't ask why this works, it is one of those things that is best left undisturbed.

As useful as BLAST is, we really want to get into sequencing data,
right?  One of the first steps you must do with your data is
evaluate its quality and throw away bad sequences.

Before you can do that, though, you need to install a bunch o' software.

We will use a so called ``Makefile``, a simple text file
that can contains a series of commands that you could otherwise
type in yourself. There will be more information on
shell programming and automation later. For now think of a ``Makefile``
as a simple way to pick which commands you can execute yourself.
Let's get started. Install `make`::

	sudo apt-get install make -y

Now get the current `Makefile` onto your system::

	curl https://raw.githubusercontent.com/ngs-docs/angus/2014/files/Makefile-short-read-quality -o Makefile

	# See the file that you have downloaded
	ls

	# Investigate the Makefile
	# more Makefile or pico Makefile

So we now have a `Makefile` and our system can
execute this `Makefile` via the `make` command.::

	make

In our case you have to always specify which section of the
`Makefile` do you wish to execture. For example you can type::

	make prepare

This will execute the parts of the Makefile that is listed below:

.. include:: files/Makefile-short-read-quality
	:code:
	:start-after: prepare:
	:end-before: software:

Note that you could also just type in these commands yourself for
the same results. The Makefile just automates this. The::

	make software

command will execute the following lines.

.. include:: files/Makefile-short-read-quality
	:code:
	:start-after: software:
	:end-before: download:


Getting some data
=================

Start at your EC2 prompt, then type ::

   make download

This will execute the following lines. Remember that you could also type
these in yourself.

.. include:: files/Makefile-short-read-quality
	:code:
	:start-after: download:
	:end-before: fastqc:

Understand the FASTQ format
===========================

See a good descrption http://en.wikipedia.org/wiki/FASTQ_format

If you don't understand the format, you don't understand the basic premise of
the data generation!

Run a FastQC analysis on each dataset:

.. include:: files/Makefile-short-read-quality
	:code:
	:start-after: fastqc:
	:end-before: trim:

We can also investigate what the files contain by matching::

	# Find stop codons
	grep ATG SRR519926_1.fastq  --color=always | head

	# Find a subsequence
	grep AGATCGGAAG SRR519926_1.fastq  --color=always | head

Pattern matching via expressions is an extremely powerful concept. We'll revisit them later.

Now, run `Trimmomatic <http://www.usadellab.org/cms/index.php?page=trimmomatic>`__
to eliminate Illumina adapters from your sequences. First we need to find the adapter sequences::

	ln -s ~/src/Trimmomatic-0.32/adapters/TruSeq3-SE.fa

then apply the trimming

Quality alone:

.. include:: files/Makefile-short-read-quality
	:code:
	:start-after: trim:
	:end-before: trimPE:

Quality and clipping:

.. include:: files/Makefile-short-read-quality
	:code:
	:start-after: trimPE:
	:end-before: end:

Now the homework:

.. note::

	Read the manual for `Trimmomatic <http://www.usadellab.org/cms/index.php?page=trimmomatic>`__. Trim the reads in parallel for both readfiles.




